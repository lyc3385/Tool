#输出到控制台  STDOUT
log4j.appender.STDOUT=org.apache.log4j.ConsoleAppender
log4j.appender.STDOUT.layout=org.apache.log4j.PatternLayout
log4j.appender.STDOUT.layout.ConversionPattern=[%p] [%l] %10.10c - %m%n
#滚动输出到文件中  A3
log4j.appender.A3=org.apache.log4j.RollingFileAppender
log4j.appender.A3.file=D:/logs-output/springtest.log
log4j.appender.A3.MaxFileSize=1024KB
log4j.appender.A3.MaxBackupIndex=10
log4j.appender.A3.layout=org.apache.log4j.PatternLayout
log4j.appender.A3.layout.ConversionPattern=\n\n[%-5p] %d{yyyy-MM-dd HH\:mm\:ss,SSS} method\:%l%n%m%n
#日常滚动输出到文件中  D
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender  
log4j.appender.D.File = F://logs/log.log  
log4j.appender.D.Append = true  
log4j.appender.D.Threshold = DEBUG   
log4j.appender.D.layout = org.apache.log4j.PatternLayout  
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n

#什么级别日志输出，以及输出到哪里，这里输出到A3和STDOUT
log4j.rootLogger=debug,A3,STDOUT
#注意如果设置成debug，就会把off+fatal+error+warn+info 级别的日志信息都输出到到A3和STOUT上面

#<1>日志级别由高到低
#	off 最高等级，用于关闭所有日志记录。
#	fatal 指出每个严重的错误事件将会导致应用程序的退出。
#	error 指出虽然发生错误事件，但仍然不影响系统的继续运行。
#	warn 表明会出现潜在的错误情形。
#	info 一般和在粗粒度级别上，强调应用程序的运行全程。
#	debug 一般用于细粒度级别上，对调试应用程序非常有帮助。
#	all 最低等级，用于打开所有日志记录。

#<2>日志常用的Appender
#    org.apache.log4j.WriterAppender:
#                  org.apache.log4j.ConsoleAppender
#                  org.apache.log4j.FileAppender
#                                 org.apache.log4j.DailyRollingFileAppender
#                                 org.apache.log4j.RollingFileAppender
#    jdbc,jms,net等都有对appender接口的实现            

#<3>日志常用的layout
#   org.apache.log4j.HTMLLayout（以HTML表格形式布局），  
#   org.apache.log4j.PatternLayout（可以灵活地指定布局模式），  
#   org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），  
#   org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）

#<4>日志layout输出的格式
#	%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL  
#	%r 输出自应用启动到输出该log信息耗费的毫秒数  
#	%c 输出所属的类目，通常就是所在类的全名  
#	%t 输出产生该日志事件的线程名  
#	%n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n”  
#	%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921  
#	%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)



%t 输出产生该日志事件的线程名
%M 是输出方法的名字、 %m 是输出代码指定的日志信息。
指定的打印信息的具体格式 ConversionPattern，具体参数：
%m 输出代码中指定的消息
%p 输出优先级，即 DEBUG， INFO， WARN， ERROR， FATAL
%r 输出自应用启动到输出该 log 信息耗费的毫秒数
%c 输出所属的类目，通常就是所在类的全名
%t 输出产生该日志事件的线程名
%n 输出一个回车换行符， Windows 平台为"rn”， Unix 平台为"n”
%d 输出日志时间点的日期或时间，默认格式为 ISO8601，也可以在其后指定格式，比如： %d{yyyy
MM dd HH:mm:ss,SSS}，输出类似： 2002 年 10 月 18 日 22： 10： 28， 921 %l 输出日志事件的
发生位置，包括类目名、发生的线程，以及在代码中的行数。
%x: 输出和当前线程相关联的 NDC(嵌套诊断环境),尤其用到像 java servlets 这样的多客户多
线程的应用中。
%%: 输出一个” %”字符
%F: 输出日志消息产生时所在的文件名称
%M: 输出执行方法
%L: 输出代码中的行号







